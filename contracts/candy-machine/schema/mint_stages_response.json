{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MintStagesResponse",
  "type": "object",
  "required": [
    "mint_stages"
  ],
  "properties": {
    "mint_stages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MintStage"
      }
    }
  },
  "definitions": {
    "MintStage": {
      "type": "object",
      "required": [
        "id",
        "name",
        "whitelist_enabled"
      ],
      "properties": {
        "finish": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "max_per_user": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "price": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "start": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "whitelist_enabled": {
          "type": "boolean"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
